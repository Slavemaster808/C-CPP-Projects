#include "s21_grep.h"

void outputWithNoFlags(int argc, int n, int check, char flag, char **argv) {
  FILE *fp;
  int i;

  i = check == 0 ? 2 : 3;
  while (i < argc) {
    fp = fopen(argv[i], "rb");
    if (!fp && flag == 's') {
      break;
    }
    if (!fp) {
      printf("No such file.");
    } else {
      char buff[BUFF_SIZE];
      char *substr;
      while (fgets(buff, BUFF_SIZE - 1, fp)) {
        substr = strstr(buff, argv[check + 1]);
        if (substr && n > 1 && flag != 'h') {
          // if (buff[strlen(buff) - 1] == '\n') {
          //   buff[strlen(buff) - 1] = '\0';
          //   printf("%s:%s\n", argv[i], buff);
          // } else {
          //   printf("%s:%s", argv[i], buff);
          // }
          printLines(buff, argv[i]);
        } else if (substr || (substr && flag == 'h')) {
          // if (buff[strlen(buff) - 1] == '\n') {
          //   buff[strlen(buff) - 1] = '\0';
          //   printf("%s\n", buff);
          // } else {
          //   printf("%s", buff);
          // }
          printLines(buff, NULL);
        }
      }
    }
    i++;
    fclose(fp);
  }
}

void printLines(char *buff, char *line) {
  if (line != NULL) {
    if (buff[strlen(buff) - 1] == '\n') {
      buff[strlen(buff) - 1] = '\0';
      printf("%s:%s\n", line, buff);
    } else {
      printf("%s:%s", line, buff);
    }
  } else {
    if (buff[strlen(buff) - 1] == '\n') {
      buff[strlen(buff) - 1] = '\0';
      printf("%s\n", buff);
    } else {
      printf("%s", buff);
    }
  }
}

void outputWithFlags(int argc, int n, int check, char flag, char **argv) {
  if (argv[1][0] == '-') {
    switch (argv[1][1]) {
      case 'e':
        outputWithNoFlags(argc, n, check, flag, argv);
        break;
      case 'c':
        countLines(argc, n, check, argv);
        break;
      case 'v':
        invertMatch(argc, n, check, argv);
        break;
      case 'n':
        numberLine(argc, n, check, argv);
        break;
      case 'l':
        matchingFiles(argc, check, argv);
        break;
      case 'i':
        ignoreCases(argc, n, check, argv);
        break;
      case 'h':
        outputWithNoFlags(argc, n, check, flag, argv);
        break;
      case 'o':
        matchedParts(argc, n, check, argv);
        break;
      case 's':
        outputWithNoFlags(argc, n, check, flag, argv);
        break;
      default:
        printf("No such flag.");
        break;
    }
  }
}

void ignoreCases(int argc, int n, int check, char **argv) {
  FILE *fp;
  int i = check == 0 ? 2 : 3;

  while (i < argc) {
    fp = fopen(argv[i], "rb");
    if (!fp) {
      printf("No such file.");
    } else {
      char buff[BUFF_SIZE];
      char *substr;
      while (fgets(buff, BUFF_SIZE - 1, fp)) {
        substr = strcasestr(buff, argv[check + 1]);
        if (substr && n > 1) {
          // if (buff[strlen(buff) - 1] == '\n') {
          //   buff[strlen(buff) - 1] = '\0';
          //   printf("%s:%s\n", argv[i], buff);
          // } else {
          //   printf("%s:%s", argv[i], buff);
          // }
          printLines(buff, argv[i]);
        } else if (substr && n == 1) {
          // if (buff[strlen(buff) - 1] == '\n') {
          //   buff[strlen(buff) - 1] = '\0';
          //   printf("%s\n", buff);
          // } else {
          //   printf("%s", buff);
          // }
          printLines(buff, NULL);
        }
      }
    }
    i++;
    fclose(fp);
  }
}

void countLines(int argc, int n, int check, char **argv) {
  FILE *fp;
  int cnt = 0;
  int i = check == 0 ? 2 : 3;

  while (i < argc) {
    fp = fopen(argv[i], "rb");
    if (!fp) {
      printf("No such file.");
    } else {
      char buff[BUFF_SIZE];
      char *substr;
      if (n > 1) {
        while (fgets(buff, BUFF_SIZE - 1, fp)) {
          substr = strstr(buff, argv[check + 1]);
          if (substr) {
            cnt++;
          }
        }
        printf("%s:%d\n", argv[i], cnt);
        cnt = 0;
      } else {
        while (fgets(buff, BUFF_SIZE - 1, fp)) {
          substr = strstr(buff, argv[check + 1]);
          if (substr) {
            cnt++;
          }
        }
        printf("%d\n", cnt);
      }
    }
    i++;
    fclose(fp);
  }
}

void invertMatch(int argc, int n, int check, char **argv) {
  FILE *fp;
  int i = check == 0 ? 2 : 3;

  while (i < argc) {
    fp = fopen(argv[i], "rb");
    if (!fp) {
      printf("No such file.");
    } else {
      char buff[BUFF_SIZE];
      char *substr;
      while (fgets(buff, BUFF_SIZE - 1, fp)) {
        substr = strstr(buff, argv[check + 1]);
        if (!substr && n > 1) {
          // if (buff[strlen(buff) - 1] == '\n') {
          //   buff[strlen(buff) - 1] = '\0';
          //   printf("%s:%s\n", argv[i], buff);
          // } else {
          //   printf("%s:%s", argv[i], buff);
          // }
          printLines(buff, argv[i]);
        } else if (!substr) {
          // if (buff[strlen(buff) - 1] == '\n') {
          //   buff[strlen(buff) - 1] = '\0';
          //   printf("%s\n", buff);
          // } else {
          //   printf("%s", buff);
          // }
          printLines(buff, NULL);
        }
      }
    }
    i++;
    fclose(fp);
  }
}

void numberLine(int argc, int n, int check, char **argv) {
  FILE *fp;
  int i = check == 0 ? 2 : 3;

  while (i < argc) {
    fp = fopen(argv[i], "rb");
    if (!fp) {
      printf("No such file.");
    } else {
      char buff[BUFF_SIZE];
      char *substr;
      int num = 1;
      if (n > 1) {
        while (fgets(buff, BUFF_SIZE - 1, fp)) {
          substr = strstr(buff, argv[check + 1]);
          if (substr) {
            if (buff[strlen(buff) - 1] == '\n') {
              buff[strlen(buff) - 1] = '\0';
              printf("%s:%d:%s\n", argv[i], num, buff);
              num++;
            } else {
              printf("%s:%d:%s", argv[i], num, buff);
              num++;
            }
          } else {
            num++;
          }
        }
      } else {
        while (fgets(buff, BUFF_SIZE - 1, fp)) {
          substr = strstr(buff, argv[check + 1]);
          if (substr) {
            if (buff[strlen(buff) - 1] == '\n') {
              buff[strlen(buff) - 1] = '\0';
              printf("%d:%s\n", num, buff);
              num++;
            } else {
              printf("%d:%s", num, buff);
              num++;
            }
          } else {
            num++;
          }
        }
      }
    }
    i++;
    fclose(fp);
  }
}

void matchingFiles(int argc, int check, char **argv) {
  FILE *fp;
  int i = check == 0 ? 2 : 3;

  while (i < argc) {
    fp = fopen(argv[i], "rb");
    if (!fp) {
      printf("No such file.");
    } else {
      char buff[BUFF_SIZE];
      char *substr;
      int check_ = 0;
      while (fgets(buff, BUFF_SIZE - 1, fp) && check_ == 0) {
        substr = strstr(buff, argv[check + 1]);
        if (substr) {
          check_ = 1;
        }
      }
      if (check_ == 1) {
        printf("%s\n", argv[i]);
      }
    }
    i++;
    fclose(fp);
  }
}

void matchedParts(int argc, int n, int check, char **argv) {
  FILE *fp;
  int i = check == 0 ? 2 : 3;

  while (i < argc) {
    fp = fopen(argv[i], "rb");
    if (!fp) {
      printf("No such file.");
    } else {
      char buff[BUFF_SIZE];
      char *substr;
      while (fgets(buff, BUFF_SIZE - 1, fp)) {
        substr = strstr(buff, argv[check + 1]);
        if (substr && n > 1) {
          printf("%s:%s\n", argv[i], argv[check + 1]);
        } else if (substr && n == 1) {
          printf("%s\n", argv[check + 1]);
        }
      }
    }
    i++;
    fclose(fp);
  }
}